import org.gradle.internal.jvm.Jvm

apply plugin: 'com.android.library'
apply plugin: 'com.novoda.bintray-release'
apply from: 'https://raw.githubusercontent.com/HendraAnggrian/hendraanggrian.github.io/master/bintray.gradle'

android {
    compileSdkVersion sdk_target.toInteger()
    buildToolsVersion build_tools
    defaultConfig {
        minSdkVersion sdk_min.toInteger()
        targetSdkVersion sdk_target.toInteger()
        consumerProguardFiles 'proguard-rules.pro'
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }
}

dependencies {
    compile project(':bundler-annotations')
    testCompile project(':bundler-compiler')

    // android
    compile "com.android.support:support-fragment:$support"
    androidTestCompile("com.android.support.test:runner:$runner") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile("com.android.support.test.espresso:espresso-core:$espresso") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    // google
    androidTestCompile "com.google.truth:truth:$google_truth"
    testCompile "com.google.truth:truth:$google_truth"
    testCompile "com.google.testing.compile:compile-testing:$google_compile"
    testCompile files(getRuntimeJar())
    testCompile files(Jvm.current().getToolsJar())

    testCompile "junit:junit:$junit"
}

def getRuntimeJar() {
    try {
        final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile();
        File runtimeJar = new File(javaBase, "lib/rt.jar");
        if (runtimeJar.exists())
            return runtimeJar;
        runtimeJar = new File(javaBase, "jre/lib/rt.jar");
        return runtimeJar.exists() ? runtimeJar : null;
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}

publish {
    userOrg bintray_user
    groupId bintray_group
    artifactId bintray_artifact
    publishVersion bintray_release
    desc bintray_desc
    website bintray_web
}