import org.gradle.internal.jvm.Jvm

apply plugin: 'com.android.library'
apply plugin: 'com.novoda.bintray-release'
apply from: 'https://raw.githubusercontent.com/HendraAnggrian/hendraanggrian.github.io/master/bintray.gradle'

android {
    compileSdkVersion versions.sdk.target
    buildToolsVersion versions.buildTools
    defaultConfig {
        minSdkVersion versions.sdk.min
        targetSdkVersion versions.sdk.target
        consumerProguardFiles 'proguard-rules.pro'
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }
}

dependencies {
    compile project(':bundler-annotations')
    testCompile project(':bundler-compiler')

    // android
    compile "com.android.support:support-fragment:$versions.android.support"
    androidTestCompile("com.android.support.test:runner:$versions.android.runner") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile("com.android.support.test.espresso:espresso-core:$versions.android.espresso") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    // google
    androidTestCompile "com.google.truth:truth:$versions.google.test.truth"
    testCompile "com.google.truth:truth:$versions.google.test.truth"
    testCompile "com.google.testing.compile:compile-testing:$versions.google.test.compile"
    testCompile files(getRuntimeJar())
    testCompile files(Jvm.current().getToolsJar())

    testCompile "junit:junit:$versions.junit"
}

publish {
    userOrg = bintray.user
    groupId = bintray.group
    artifactId = bintray.artifact.bundler.id
    publishVersion = versions.release
    desc = bintray.artifact.bundler.desc
    website = bintray.artifact.bundler.website
}

static def getRuntimeJar() {
    try {
        final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile();
        File runtimeJar = new File(javaBase, "lib/rt.jar");
        if (runtimeJar.exists())
            return runtimeJar;
        runtimeJar = new File(javaBase, "jre/lib/rt.jar");
        return runtimeJar.exists() ? runtimeJar : null;
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}